{"title":"","date":"2018-08-12T01:58:48.000Z","excerpt":"","slug":"Foundation","comments":true,"updated":"2018-08-12T17:05:03.000Z","content":"<p>[TOC]</p>\n<h1 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h1><ul>\n<li>万物皆对象<blockquote>\n<p>按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词。<br>——《JAVA编程思想》</p>\n</blockquote>\n</li>\n</ul>\n<p>简而言之，对象是类的实例。比如所有的电脑叫“电脑”，电脑是一个类，而具体下来，你的mac是一个对象，是“电脑”的实例。</p>\n<h2 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h2><p>举例：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Person person</span> = new Person(<span class=\"string\">\"大大卷\"</span>);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在堆空间里创建一个Person类对象</li>\n<li>末尾的()意味着在对象创建后，立即调用Person类的构造函数，对刚生成的对象进行初始化。</li>\n<li>等号左边，其实是创建了一个Person类引用变量person，用来指向Person对象的对象引用。</li>\n<li>“=”操作符使对象引用指向刚创建的Person对象</li>\n</ol>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">person</span> = new Person(<span class=\"string\">\"大大卷\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>两段代码功能一样。</p>\n<p>两个实体：对象引用变量和对象本身。</p>\n<p>一个Person类可以创建出无数个对象，但这些对象不可能全不都叫“Peron”叭 _(:з」∠) _</p>\n<p>对象连名都没有，没法直接访问它。我们只能通过对象引用来间接访问对象。</p>\n<blockquote>\n<p>Java中都是通过引用来操纵对象的。</p>\n</blockquote>\n<blockquote>\n<p>Java对象和引用的关系可以说是互相关联，却又彼此独立。彼此独立主要表现在：引用是可以改变的，它可以指向别的对象。</p>\n</blockquote>\n<blockquote>\n<p>从存储空间上来说，对象和引用也是独立的，它们存储在不同的地方，对象一般存储在堆中，而引用存储在速度更快的堆栈中。 </p>\n</blockquote>\n<p>对象好比是一只很大的气球，引用变量则是一根可以用来系气球的绳子。</p>\n<p>如果只执行了第一条语句，还没执行第二条，此时创建的引用变量person还没指向任何一个对象，它的值是null。</p>\n<p>引用变量可以指向某个对象，或者为null。</p>\n<p>它是一根绳，一根还没有系上任何一个汽球的绳。执行了第二句后，一只新汽球做出来了，并被系在person这根绳上。抓住这根绳，就等于抓住了那只汽球。 </p>\n<blockquote>\n<p>每种编程语言都有自己的数据处理方式。有些时候，程序员必须注意将要处理的数据是什么类型。你是直接操纵元素，还是用某种基于特殊语法的间接表示（例如C/C++里的指针）来操作对象。所有这些在 Java 里都得到了简化，一切都被视为对象。因此，我们可采用一种统一的语法。尽管将一切都“看作”对象，但<strong>操纵的标识符实际是指向一个对象的“引用”（reference）</strong>。</p>\n</blockquote>\n<p>也就是说person是一个引用，是指向一个可以指向Person类的对象的引用。真正创建对象的语句是右边的<strong>new Person（“大大卷”）；</strong></p>\n<p>事实上到这里还会有点懵，但再看下面的例子就会比较清晰了：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">person</span> = new Person(<span class=\"string\">\"大大卷\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">person</span> = new Person(<span class=\"string\">\"毛毛虫\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>先让person指向了<strong>大大卷</strong>这个对象，然后又指向了<strong>毛毛虫</strong>这个对象。da ga la！！Person person只是生命了一个Person类的引用，它可以指向任何Person类的实例。类似于：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">a</span>=<span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">a</span>=<span class=\"number\">3</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>哇塞这个就很清楚啦=-=先声明一个int类型的变量a，对a赋值为2，然后又赋值为3.</p>\n<p>如果来一句</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Person</span> person2；</span><br><span class=\"line\">person2 = <span class=\"keyword\">person</span>；</span><br></pre></td></tr></table></figure>\n<p>其实发生的是复制行为。但是对象本身没有被复制，被复制的知识对象引用。person2也指向了person所指向的对象。两根绳系的是同一只气球哦！！！</p>\n<p>然后，如果</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person2</span> = new Person();</span><br><span class=\"line\"><span class=\"attr\">person</span> = person2；</span><br></pre></td></tr></table></figure>\n<p>那么person也指向了第二个对象，而第一个对象呢？飞走啦，据说是被JAVA的垃圾回收机制回收了，emmmmmm好吧 这很可以</p>\n<p>and如果仅仅是为了打印而生成一个对象，就不需要用引用变量来系住它。例如打印字符串：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-class\">.println</span>(“<span class=\"selector-tag\">I</span>”);</span><br></pre></td></tr></table></figure>\n<p>字符串对象“I”在打印后即被丢弃。有人把这种对象称之为临时对象。</p>\n<blockquote>\n<p>对象与引用的关系将持续到对象回收。</p>\n</blockquote>\n<p>完了对象回收又是咋回事啊/笑哭</p>\n<p>总之，<br><strong>在初始化时，“=”语句左边的是引用，右边new出来的是对象。在后面的左右都是引用的“=”语句时，左右的引用同时指向了右边引用所指向的对象</strong></p>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/dolphin0520/p/3592498.html\" target=\"_blank\" rel=\"noopener\">浅谈Java中的对象和引用</a></li>\n<li><a href=\"http://zwmf.iteye.com/blog/1738574\" target=\"_blank\" rel=\"noopener\">JAVA对象引用，以及对象赋值</a></li>\n</ul>\n<h2 id=\"为什么要接口\"><a href=\"#为什么要接口\" class=\"headerlink\" title=\"为什么要接口\"></a>为什么要接口</h2><p>抽象类：每个类只能扩展于一个类，不能扩展第二个类了</p>\n<p>but每个类可以实现多个接口</p>\n<p>避免多重继承的复杂性和低效性。</p>\n<h2 id=\"break-continue-return\"><a href=\"#break-continue-return\" class=\"headerlink\" title=\"break||continue||return\"></a>break||continue||return</h2><blockquote>\n<p> break 用于完全结束一个循环，跳出循环体。不管哪种循环，一旦在循环体中遇到break，系统将完全结束掉该循环。</p>\n</blockquote>\n<blockquote>\n<p>continue只是忽略本次循环剩下的语句,立即开始下次循环，并不会终止循环;而break则是完全终止循环。</p>\n</blockquote>\n<blockquote>\n<p>return不是专门拿来结束循环的，return的功能是结束一个 方法 。当一个方法执行到一个return语句时，这个方法将会给结束。</p>\n</blockquote>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><p>封装了由一系列语句所描述的运算</p>\n<p>need 参数(parameter) 算出某种数据类型的返回值</p>\n<h2 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h2><ol>\n<li>方法的参数按值传递</li>\n</ol>\n<p>不能改变原数组变量本身</p>\n<ol>\n<li><p>方法名可以被重载</p>\n</li>\n<li><p>方法只能返回一个值<br>but可以有多个return语句</p>\n</li>\n<li><p>方法可以产生副作用</p>\n</li>\n</ol>\n<p>void 类型的静态方法会产生副作用(接受输入、产生输出、修改数组或者改变系统状态)</p>\n<h2 id=\"静态方法-amp-非静态方法-实例方法\"><a href=\"#静态方法-amp-非静态方法-实例方法\" class=\"headerlink\" title=\"静态方法&amp;非静态方法(实例方法)\"></a>静态方法&amp;非静态方法(实例方法)</h2><p>又称函数——一组在被调用时会被顺序执行的语句.</p>\n<p>made of <strong>签名</strong>(关键字public static以及函数的返回值，方法名以及一串各种类型的参数)和<strong>函数体</strong>(即{code})</p>\n<p>我终于在今天(24号，晚到惭愧)体会到 这其实跟数学里的函数意思是差不多的，就像一个计算过程一样</p>\n<p>调用函数只需要：方法名(参数)</p>\n<h1 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h1><h1 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h1><blockquote>\n<p>对于封装而言，一个对象它所封装的是自己的属性和方法，所以它是不需要依赖其他对象就可以完成自己的操作。</p>\n</blockquote>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用封装有三大好处：</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"number\">1</span>、良好的封装能够减少耦合。</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"number\">2</span>、类内部的结构可以自由修改。</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"number\">3</span>、可以对成员进行更精确的控制。</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"number\">4</span>、隐藏信息，实现细节。</span><br></pre></td></tr></table></figure>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><ul>\n<li>子类可以继承父类的属性和方法，但不能继承构造器，只能调用父类的构造器</li>\n</ul>\n<blockquote>\n<p>使用super()</p>\n</blockquote>\n<h2 id=\"protected关键字\"><a href=\"#protected关键字\" class=\"headerlink\" title=\"protected关键字\"></a>protected关键字</h2><h2 id=\"向上转型\"><a href=\"#向上转型\" class=\"headerlink\" title=\"向上转型\"></a>向上转型</h2><h1 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h1><p>一个对象变量可以指示多种实际类型的现象被称为<strong>多态</strong></p>\n<p>在运行时能够自动地选择调用哪个方法的现象称为<strong>动态绑定</strong></p>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><p>指能够分析类能力的程序。<br>反射库大量应用于JavaBeans中</p>\n<ol>\n<li>在运行时分析类的能力</li>\n</ol>\n<blockquote>\n<p>检查类的结构</p>\n</blockquote>\n<ol>\n<li>在运行时查看对象</li>\n<li>实现通用的数组操纵代码</li>\n<li>利用method对象（类比于c++函数指针</li>\n</ol>\n<p>try{可能抛出已检查异常的方法调用代码}</p>\n<p>catch{处理器代码}</p>\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><p>接口不是类，而是对类的一组需求描述（可以看成是没有实例域的抽象类</p>\n<p>1）将类声明为实现给定的接口<br>2）对接口中所有方法进行定义</p>\n<p>要将类声明为实现某个接口，需要使用implements</p>\n<p>1.所有方法自动属于public；接口中的域将被自动设为public static final</p>\n<p>2.接口不是类，尤其不能用new运算符实例化一个接口；</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"keyword\">new</span> <span class=\"built_in\">Comparable</span>() <span class=\"comment\">// ERROR</span></span><br></pre></td></tr></table></figure>\n<p>尽管不能构造接口的对象，却能声明接口的变量</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Comparable</span> x; <span class=\"comment\">// Ok</span></span><br></pre></td></tr></table></figure>\n<p>接口变量必须引用实现了接口的类对象；</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"keyword\">new</span> <span class=\"type\">Employee</span>() <span class=\"comment\">// ok provide Employee implements Comparable</span></span><br></pre></td></tr></table></figure>\n<p>接口可以被拓展</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public<span class=\"built_in\"> interface </span>Moveable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    void move(double x, double y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public<span class=\"built_in\"> interface </span>Powered extends Moveable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double milesPerGallon();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然在接口中不能包含实例域或静态方法，但却可以包含常量</p>\n<p><strong>回调</strong>是一种常见的程序设计模式</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.company;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.Timer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">        ActionListener listener = <span class=\"keyword\">new</span> <span class=\"type\">TimePrinter</span>();</span><br><span class=\"line\">        Timer t = <span class=\"keyword\">new</span> <span class=\"type\">Timer</span>(<span class=\"number\">1000</span>, listener);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        JOptionPane.showMessageDialog(<span class=\"literal\">null</span>, <span class=\"string\">\"Quit program?\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimePrinter</span> <span class=\"keyword\"><span class=\"keyword\">implements</span> <span class=\"type\">ActionListener</span></span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> void actionPerformed(ActionEvent event)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"At the tone, the time is \"</span>+ <span class=\"keyword\">new</span> <span class=\"type\">Date</span>());</span><br><span class=\"line\">        Toolkit.getDefaultToolkit().beep();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"lambda表达式\"><a href=\"#lambda表达式\" class=\"headerlink\" title=\"lambda表达式\"></a>lambda表达式</h2><p>Java是一种面向对象语言，所以必须构造一个对象，这个对象的类需要有一个方法能包含所需的代码</p>\n<p>lambda表达式就是一个代码块，以及必须传入代码的变量规范</p>\n<p>即使lambda表达式没有参数，仍然要提供空括号，就像无参数方法一样</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"params\">()</span> -&gt;</span> &#123; <span class=\"keyword\">for</span> (int i = <span class=\"number\">100</span>; i&gt;=<span class=\"number\">0</span>; i--) System.out.println(i);&#125;</span><br></pre></td></tr></table></figure>\n<p>lambda表达式：</p>\n<ul>\n<li>一个代码块</li>\n<li>参数</li>\n<li>自有变量的值 指非参数而且不在代码中定义的变量</li>\n<li>（闭包）</li>\n</ul>\n<p>对于只有一个抽象方法的接口，需要这种接口的对象时，就可以提供一个lambda表达式。这种接口称为<strong>函数式接口</strong>(必须有一个抽象方法)</p>\n<p>最好把lambda表达式看做是一个函数，而不是一个对象，接受lambda表达式可以传递到函数式接口</p>\n<p>lambda表达式转换接口：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Timer <span class=\"literal\">t</span> = new Timer(<span class=\"number\">1000</span>, event -&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"At the tone, the time is \"</span>+ new Date())<span class=\"comment\">;</span></span><br><span class=\"line\">        Toolkit.getfaultToolkit().beep()<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>方法引用</strong><br>（现有的方法可以完成想要传递到其他代码的某个动作）</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Timer t = <span class=\"keyword\">new</span> Timer(<span class=\"number\">1000</span>, <span class=\"keyword\">event</span> -&gt; System.<span class=\"keyword\">out</span>.println(<span class=\"keyword\">event</span>));</span><br></pre></td></tr></table></figure>\n<p>等于</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Timer <span class=\"literal\">t</span> = new Timer(<span class=\"number\">1000</span>,System.out:<span class=\"symbol\">:println</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>方法引用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-pseudo\">::println</span></span><br></pre></td></tr></table></figure>\n<p>等价于lambda表达式</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x -&gt; System<span class=\"selector-class\">.out</span><span class=\"selector-class\">.println</span>(x)</span><br></pre></td></tr></table></figure>\n<p><strong>要用::操作符分隔方法名与对象或类名</strong></p>\n<ul>\n<li>object::instanceMethod</li>\n<li>Class::staticMethod</li>\n</ul>\n<p>方法引用等价于提供方法参数的lambda表达式</p>\n<ul>\n<li>Class::instanceMethod</li>\n</ul>\n<p>第一个参数会成为方法的目标</p>\n<p>类似于lambda表达式，方法引用不能独立存在，总是会转换为函数式接口的实例。</p>\n<p><strong>构造器引用</strong></p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;<span class=\"built_in\">String</span>&gt; names = <span class=\"params\">...</span>;</span><br><span class=\"line\">Stream&lt;Person&gt; stream = names.stream().<span class=\"built_in\">map</span>(Person<span class=\"type\">::new</span>);</span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Person&gt; people = stream.collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p><strong>变量作用域</strong></p>\n<p>lambda表达式可以捕获外围作用域中变量的值，但能引用值不会改变的变量</p>\n<p>在一个lambda表达式中使用this关键字时，是指创建这个lambda表达式的方法的this参数</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">Application</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ActionListener listener = <span class=\"keyword\">event</span> -&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"keyword\">this</span>.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>处理</strong></p>\n<p>延迟执行</p>\n<ul>\n<li>在一个单独的线程中运行代码</li>\n<li>多次运行代码</li>\n<li>在算法的适当位置（例如，排序中的比较操作</li>\n<li>发生某种情况</li>\n<li>必要时</li>\n</ul>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><p>定义在另一个类中的类</p>\n<p>why we need：</p>\n<ul>\n<li>内部类方法可以访问该类定义所在的作用域中的数据，包括私有的数据</li>\n<li>内部类可以对同一个包中的其他类隐藏起来</li>\n<li>想要定义一个回调函数：<strong>匿名内部类</strong></li>\n</ul>\n<p>内部类</p>\n<ul>\n<li>所有静态域都必须是final</li>\n</ul>\n<blockquote>\n<p>因为我们希望一个静态域只有一个实例，不过对于每个外部对象，会分别有一个单独的内部类实例。如果这个域不是final，他可能就不是唯一的。</p>\n</blockquote>\n<ul>\n<li>不能有static方法</li>\n</ul>\n<p><strong>使用内部类访问对象状态</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TalkingClock</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> interval;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> beep;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TalkingClock</span><span class=\"params\">(<span class=\"keyword\">int</span> interval, <span class=\"keyword\">boolean</span> beep)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.interval = interval;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beep = beep;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ActionListener listener = <span class=\"keyword\">new</span> TimePrinter();</span><br><span class=\"line\">        Timer t = <span class=\"keyword\">new</span> Timer(interval, listener);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimePrinter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ActionListener</span></span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent event)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"At the tone, the time is \"</span>+ <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(beep) Toolkit.getDefaultToolkit().beep();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TimePrinter类位于TalkingClock类内部，这并不意味着每个TalkingClock都有一个TimePrinter实例域，TimePrinter对象是由TalkingClock类的方法构造</p>\n<p><strong>TimePrinter类没有实例域或者名为beep的变量，beep引用了创建TimePrinter的TalkingClock对象的域</strong></p>\n<p>一个方法可以引用调用这个方法的对象数据域，内部类既可以访问自身的数据域，也可以访问创建他的外围对象的数据域</p>\n<p>内部类的对象总有一个隐式引用，它指向了创建他的外部类对象，这种引用是不可见的！！</p>\n<p><strong>局部内部类</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">TimePrinter</span> <span class=\"title\">implements</span> <span class=\"title\">ActionListener</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span>(<span class=\"params\">Action <span class=\"keyword\">event</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"At the tone, the time is \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(beep) Toolkit.getDefaultToolkit().beep();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不能用public/private声明</li>\n</ul>\n<blockquote>\n<p>作用域被限定在声明这个局部类的块中，对外部世界完全隐藏<br>即使TalkingClock类中的其他代码也不能访问它，除start方法外，没有任何方法知道TimePrinter类的存在了哦!!!</p>\n</blockquote>\n<ul>\n<li>不仅能够访问包含它们的外部类，还可以访问局部变量</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(<span class=\"keyword\">int</span> interval, <span class=\"keyword\">boolean</span> beep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimePrinter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ActionListener</span></span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent event)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"At the tone, the time is \"</span>+ <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(beep) Toolkit.getDefaultToolkit().beep();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ActionListener listener = <span class=\"keyword\">new</span> TimePrinter();</span><br><span class=\"line\">    Timer t = <span class=\"keyword\">new</span> Timer(interval, listener);</span><br><span class=\"line\">    t.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>匿名内部类</strong><br>假如只创建这个类的一个对象，就不必命名了</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> start(<span class=\"keyword\">int</span> interval, <span class=\"keyword\">boolean</span> <span class=\"built_in\">beep</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ActionListener listener = <span class=\"keyword\">new</span> ActionListener()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> actionPerformed(ActionEvent event)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"At the tone, the time is \"</span>+ <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"built_in\">if</span>(<span class=\"built_in\">beep</span>) Toolkit.getDefaultToolkit().<span class=\"built_in\">beep</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Timer t = <span class=\"keyword\">new</span> Timer(interval, listener);</span><br><span class=\"line\">    t.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>————创建一个实现ActionListener接口的类的新对象，需要实现的方法actionPerformed定义在{}内</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> SuperType(construction parameters)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    inner <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">methods</span> <span class=\"title\">and</span> <span class=\"title\">data</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SuperType可以是接口（ActionListener），内部类需要实现这个接口;</p>\n</blockquote>\n<blockquote>\n<p>SuperType可以是一个类，内部类就要扩展他</p>\n</blockquote>\n<p>由于构造器名字必须与类名相同，而匿名类没有类名，所以匿名类无构造器。只有将构造器参数传递给超类构造器。</p>\n<p>内部类实现接口的时候，不能有任何构造参数！！！</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">new</span> InterfaceType()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    method <span class=\"literal\">and</span> <span class=\"built_in\">data</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>如果构造参数的闭小括号后面跟一个开大括号，正在定义的就是匿名内部类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> annoymousInnerClass;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonymousInnerClassTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        TalkingClock clock = <span class=\"keyword\">new</span> TalkingClock();</span><br><span class=\"line\">        clock.start(<span class=\"number\">1000</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        JOptionPane.showMessageDialog(<span class=\"keyword\">null</span>, <span class=\"string\">\"quit program?\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TalkingClock</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(<span class=\"keyword\">int</span> interval, <span class=\"keyword\">boolean</span> beep)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ActionListener listener = <span class=\"keyword\">new</span> ActionListener()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent event)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"At the tone, the time is \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(beep) Toolkit.getDefaultToolkit().beep();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Timer t = <span class=\"keyword\">new</span> Timer(interval, listener);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>静态内部类</strong><br>对象中不需要引用任何其他的对象，不需要访问外围类对象的时候 为此可以将这个内部类声明为static</p>\n<p>只有内部类能够声明为static。静态内部类的对象除了没有对生成它的外围类对象的引用特权外，与其他所有内部类完全一样。</p>\n<p>可以有静态域和方法</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类</p>\n","next":{"title":"Design Pattern - Prototype Pattern && Factory Method Pattern","slug":"Design-Pattern-Prototype-Pattern-Factory-Method-Pattern"},"link":"http://yoursite.com/post/Foundation"}