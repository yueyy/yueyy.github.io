{"title":"Input/Output redirection and Regular expression","date":"2018-11-30T17:25:46.000Z","excerpt":"","slug":"Input-Output-redirection-and-Regular-expression","comments":true,"updated":"2018-12-01T21:15:33.183Z","content":"<h1 id=\"Input-Output-redirection\"><a href=\"#Input-Output-redirection\" class=\"headerlink\" title=\"Input/Output redirection\"></a>Input/Output redirection</h1><h3 id=\"管道命令\"><a href=\"#管道命令\" class=\"headerlink\" title=\"管道命令\"></a>管道命令</h3><blockquote>\n<p>| : 将前一个命令的输出给下一个命令作为输入</p>\n</blockquote>\n<p><strong>仅将stdout传输到stdin</strong></p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comma<span class=\"symbol\">nd1</span> | comma<span class=\"symbol\">nd2</span></span><br></pre></td></tr></table></figure>\n<p>管道技术是Linux间的一种通信技术，利用先进先出排队模型来指挥进程间的通信（可当作连接两个实体的一个单向连接器）。Linux管道可用于应用程序之间、linux命令之间、应用程序与命令间的通讯。shell编程指利用管道进行Linux命令之间的通信。</p>\n<h3 id=\"tee\"><a href=\"#tee\" class=\"headerlink\" title=\"tee\"></a>tee</h3><blockquote>\n<p>write to both standard output and to a file</p>\n</blockquote>\n<p><strong>重定向命令</strong></p>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command &gt; file</td>\n<td>将输出重定向到file</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>将输入重定向到 file</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>将输出以追加的方式重定向到 file</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>将文件描述符为 n 的文件重定向到 file</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>将文件描述符为 n 的文件以追加的方式重定向到 file</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>将输出文件 m 和 n 合并</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>输入文件 m 和 n 合并</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入</td>\n</tr>\n</tbody>\n</table>\n<p><strong>I/O重定向</strong></p>\n<p>基于标准数据流原理</p>\n<ul>\n<li>标准输入（stdin）0</li>\n<li>标准输出（stdout）1</li>\n<li>标准错误输出（stderr）2</li>\n</ul>\n<p><strong>重定向I/O的是shell而不是程序</strong></p>\n<p>对Linux进程来讲，每个打开的文件都是通过文件描述符(File Descriptor)来标识的，内核为每个进程维护了一个<strong>文件描述符表</strong>，这个表以FD为索引，再进一步指向文件的详细信息。在进程创建时，内核为进程默 认创建了 <code>0、1、2</code> 三个特殊的FD，这就是<code>STDIN、STDOUT和STDERR</code>。</p>\n<p><img src=\"https://img-blog.csdn.net/20160918134712346\" alt=\"图片\"></p>\n<p><strong>I/O重定向也就是让已创建的FD指向其他文件。</strong></p>\n<p><a href=\"https://blog.csdn.net/beautysleeper/article/details/52573994\" target=\"_blank\" rel=\"noopener\">Shell I/O重定向的原理解释</a></p>\n<p><a href=\"https://blog.csdn.net/taiyang1987912/article/details/39401265\" target=\"_blank\" rel=\"noopener\">I/O重定向</a></p>\n<h3 id=\"输入重定向\"><a href=\"#输入重定向\" class=\"headerlink\" title=\"输入重定向\"></a>输入重定向</h3><blockquote>\n<p>通常从标准输入获取输入的命令可以有自己的方式从文件进行输入重定向。</p>\n</blockquote>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">command</span> &lt; <span class=\"title\">file</span></span><br></pre></td></tr></table></figure>\n<p>file作为输入给command</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">command</span> &lt;&lt;&lt; <span class=\"title\">string</span></span><br></pre></td></tr></table></figure>\n<p>string给command</p>\n<h3 id=\"输出重定向\"><a href=\"#输出重定向\" class=\"headerlink\" title=\"输出重定向\"></a>输出重定向</h3><blockquote>\n<p>一个命令的输出通常用于标准输出，也可以很容易地将输出转移到一个文件。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> file1.txt</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">: &gt; <span class=\"keyword\">filename</span></span><br></pre></td></tr></table></figure>\n<p>将filename变为空文件，size为0</p>\n<p>文件不存在则创建</p>\n<p>: 为占位 不产生输出</p>\n<h3 id=\"dev-null\"><a href=\"#dev-null\" class=\"headerlink\" title=\"/dev/null\"></a>/dev/null</h3><blockquote>\n<p>有时希望执行某个命令，但又不需要显示输出，则将输出重定向到/dev/null，从而丢弃输出</p>\n</blockquote>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command &gt; <span class=\"regexp\">/dev/</span><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n<p><strong>/dev/null</strong></p>\n<ul>\n<li>写入的内容都会被丢弃</li>\n<li>无法读取内容</li>\n<li>达到“禁止输出”效果</li>\n</ul>\n<p>错误输出不显示</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">2 </span>&gt; /dev/null</span><br></pre></td></tr></table></figure>\n<h1 id=\"Regular-Expression\"><a href=\"#Regular-Expression\" class=\"headerlink\" title=\"Regular Expression\"></a>Regular Expression</h1><p>正则表达式是什么？</p>\n<blockquote>\n<p>记录文本规则的代码</p>\n</blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">正则表达式</a></p>\n<p><strong>通配符wildcard</strong></p>\n<ol>\n<li><p><code>.</code>匹配不包括换行的任意字符</p>\n</li>\n<li><p><code>\\s</code>空格 tab 换行</p>\n</li>\n</ol>\n<ul>\n<li><code>[\\s\\S]</code>表示匹配任意字符</li>\n<li>\\S是\\s的反义</li>\n</ul>\n<ol>\n<li><code>*</code>匹配0-n个</li>\n<li><code>+</code>匹配1-n个</li>\n<li><code>\\</code>转义</li>\n<li><code>[]</code>单字符取一个，比如[abc]会匹配<code>a或b或c</code></li>\n<li><code>^</code>字符串开始</li>\n<li><code>$</code>字符串结束</li>\n<li><code>{1,3}</code>循环次数</li>\n<li><code>？</code><ul>\n<li>匹配一个或零个</li>\n<li>非贪婪模式</li>\n</ul>\n</li>\n<li><code>|</code>多数据选一</li>\n<li><code>()</code>数据分界和取数据</li>\n<li><code>(?:)</code>非捕获组</li>\n<li>分隔符</li>\n<li>模式修饰符</li>\n</ol>\n<p><a href=\"http://www.zjmainstay.cn/my-regexp\" target=\"_blank\" rel=\"noopener\">正则字符</a></p>\n<p><a href=\"https://deerchao.net/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"noopener\">入门教程</a></p>\n<p>1-65535 匹配正则</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">65530</span><span class=\"number\">-65535</span>  -&gt;  <span class=\"number\">6553</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]</span><br><span class=\"line\"><span class=\"number\">65500</span><span class=\"number\">-65529</span>  -&gt;  <span class=\"number\">655</span>[<span class=\"number\">0</span><span class=\"number\">-2</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]</span><br><span class=\"line\"><span class=\"number\">65000</span><span class=\"number\">-65499</span>  -&gt;  <span class=\"number\">65</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">2</span>&#125;    第三位区间<span class=\"number\">0</span><span class=\"number\">-4</span>，后两位<span class=\"number\">0</span><span class=\"number\">-9</span></span><br><span class=\"line\"><span class=\"number\">60000</span><span class=\"number\">-64999</span>  -&gt;  <span class=\"number\">6</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">3</span>&#125;     第二位区间<span class=\"number\">0</span><span class=\"number\">-4</span>，后三位<span class=\"number\">0</span><span class=\"number\">-9</span></span><br><span class=\"line\"><span class=\"number\">10000</span><span class=\"number\">-59999</span>  -&gt;  [<span class=\"number\">1</span><span class=\"number\">-5</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">4</span>&#125;      第一位区间<span class=\"number\">1</span><span class=\"number\">-5</span>，后四位<span class=\"number\">0</span><span class=\"number\">-9</span></span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"number\">-9999</span>       -&gt;  [<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">0</span>,<span class=\"number\">3</span>&#125;    第一位只能是<span class=\"number\">1</span><span class=\"number\">-9</span>，后三位可有可无</span><br></pre></td></tr></table></figure>\n<p>最后得：</p>\n<p><code></code>(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{0,3})`  </p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>判断一个字符串是否合法的E-mail</li>\n</ul>\n<ol>\n<li>创建一个匹配E-mail的正则表达式</li>\n<li>用该正则表达式去匹配用户的输入</li>\n</ol>\n","prev":{"title":"2018-2019上学期","slug":"2018-2019上学期"},"next":{"title":"JavaBaseNote","slug":"JavaBaseNotes"},"link":"http://yoursite.com/post/Input-Output-redirection-and-Regular-expression"}