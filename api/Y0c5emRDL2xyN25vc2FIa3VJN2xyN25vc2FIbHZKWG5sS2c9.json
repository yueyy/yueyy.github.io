{"title":"","date":"2018-08-12T01:58:48.000Z","excerpt":"","slug":"对象与对象引用","comments":true,"updated":"2018-08-12T01:58:48.000Z","content":"<p>[TOC]</p>\n<h2 id=\"对象：\"><a href=\"#对象：\" class=\"headerlink\" title=\"对象：\"></a>对象：</h2><ul>\n<li>万物皆对象<blockquote>\n<p>按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词。<br>——《JAVA编程思想》</p>\n</blockquote>\n</li>\n</ul>\n<p>简而言之，对象是类的实例。比如所有的电脑叫“电脑”，电脑是一个类，而具体下来，你的mac是一个对象，是“电脑”的实例。</p>\n<h2 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h2><p>举例：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Person person</span> = new Person(<span class=\"string\">\"大大卷\"</span>);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在堆空间里创建一个Person类对象</li>\n<li>末尾的()意味着在对象创建后，立即调用Person类的构造函数，对刚生成的对象进行初始化。</li>\n<li>等号左边，其实是创建了一个Person类引用变量person，用来指向Person对象的对象引用。</li>\n<li>“=”操作符使对象引用指向刚创建的Person对象</li>\n</ol>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">person</span> = new Person(<span class=\"string\">\"大大卷\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>两段代码功能一样。</p>\n<p>两个实体：对象引用变量和对象本身。</p>\n<p>一个Person类可以创建出无数个对象，但这些对象不可能全不都叫“Peron”叭 _(:з」∠) _</p>\n<p>对象连名都没有，没法直接访问它。我们只能通过对象引用来间接访问对象。</p>\n<blockquote>\n<p>Java中都是通过引用来操纵对象的。</p>\n</blockquote>\n<blockquote>\n<p>Java对象和引用的关系可以说是互相关联，却又彼此独立。彼此独立主要表现在：引用是可以改变的，它可以指向别的对象。</p>\n</blockquote>\n<blockquote>\n<p>从存储空间上来说，对象和引用也是独立的，它们存储在不同的地方，对象一般存储在堆中，而引用存储在速度更快的堆栈中。 </p>\n</blockquote>\n<p>对象好比是一只很大的气球，引用变量则是一根可以用来系气球的绳子。</p>\n<p>如果只执行了第一条语句，还没执行第二条，此时创建的引用变量person还没指向任何一个对象，它的值是null。</p>\n<p>引用变量可以指向某个对象，或者为null。</p>\n<p>它是一根绳，一根还没有系上任何一个汽球的绳。执行了第二句后，一只新汽球做出来了，并被系在person这根绳上。抓住这根绳，就等于抓住了那只汽球。 </p>\n<blockquote>\n<p>每种编程语言都有自己的数据处理方式。有些时候，程序员必须注意将要处理的数据是什么类型。你是直接操纵元素，还是用某种基于特殊语法的间接表示（例如C/C++里的指针）来操作对象。所有这些在 Java 里都得到了简化，一切都被视为对象。因此，我们可采用一种统一的语法。尽管将一切都“看作”对象，但<strong>操纵的标识符实际是指向一个对象的“引用”（reference）</strong>。</p>\n</blockquote>\n<p>也就是说person是一个引用，是指向一个可以指向Person类的对象的引用。真正创建对象的语句是右边的<strong>new Person（“大大卷”）；</strong></p>\n<p>事实上到这里还会有点懵，但再看下面的例子就会比较清晰了：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">person</span> = new Person(<span class=\"string\">\"大大卷\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">person</span> = new Person(<span class=\"string\">\"毛毛虫\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>先让person指向了<strong>大大卷</strong>这个对象，然后又指向了<strong>毛毛虫</strong>这个对象。da ga la！！Person person只是生命了一个Person类的引用，它可以指向任何Person类的实例。类似于：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">a</span>=<span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">a</span>=<span class=\"number\">3</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>哇塞这个就很清楚啦=-=先声明一个int类型的变量a，对a赋值为2，然后又赋值为3.</p>\n<p>如果来一句</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Person</span> person2；</span><br><span class=\"line\">person2 = <span class=\"keyword\">person</span>；</span><br></pre></td></tr></table></figure>\n<p>其实发生的是复制行为。但是对象本身没有被复制，被复制的知识对象引用。person2也指向了person所指向的对象。两根绳系的是同一只气球哦！！！</p>\n<p>然后，如果</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person2</span> = new Person();</span><br><span class=\"line\"><span class=\"attr\">person</span> = person2；</span><br></pre></td></tr></table></figure>\n<p>那么person也指向了第二个对象，而第一个对象呢？飞走啦，据说是被JAVA的垃圾回收机制回收了，emmmmmm好吧 这很可以</p>\n<p>and如果仅仅是为了打印而生成一个对象，就不需要用引用变量来系住它。例如打印字符串：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-class\">.println</span>(“<span class=\"selector-tag\">I</span>”);</span><br></pre></td></tr></table></figure>\n<p>字符串对象“I”在打印后即被丢弃。有人把这种对象称之为临时对象。</p>\n<blockquote>\n<p>对象与引用的关系将持续到对象回收。</p>\n</blockquote>\n<p>完了对象回收又是咋回事啊/笑哭</p>\n<p>总之，<br><strong>在初始化时，“=”语句左边的是引用，右边new出来的是对象。在后面的左右都是引用的“=”语句时，左右的引用同时指向了右边引用所指向的对象</strong></p>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/dolphin0520/p/3592498.html\" target=\"_blank\" rel=\"noopener\">浅谈Java中的对象和引用</a></li>\n<li><a href=\"http://zwmf.iteye.com/blog/1738574\" target=\"_blank\" rel=\"noopener\">JAVA对象引用，以及对象赋值</a></li>\n</ul>\n<h2 id=\"为什么要接口\"><a href=\"#为什么要接口\" class=\"headerlink\" title=\"为什么要接口\"></a>为什么要接口</h2><p>抽象类：每个类只能扩展于一个类，不能扩展第二个类了</p>\n<p>but每个类可以实现多个接口</p>\n<p>避免多重继承的复杂性和低效性。</p>\n<h2 id=\"break-continue-return\"><a href=\"#break-continue-return\" class=\"headerlink\" title=\"break||continue||return\"></a>break||continue||return</h2><blockquote>\n<p> break 用于完全结束一个循环，跳出循环体。不管哪种循环，一旦在循环体中遇到break，系统将完全结束掉该循环。</p>\n</blockquote>\n<blockquote>\n<p>continue只是忽略本次循环剩下的语句,立即开始下次循环，并不会终止循环;而break则是完全终止循环。</p>\n</blockquote>\n<blockquote>\n<p>return不是专门拿来结束循环的，return的功能是结束一个 方法 。当一个方法执行到一个return语句时，这个方法将会给结束。</p>\n</blockquote>\n","next":{"title":"Design Pattern - Prototype Pattern && Factory Method Pattern","slug":"Design-Pattern-Prototype-Pattern-Factory-Method-Pattern"},"link":"http://yoursite.com/post/对象与对象引用"}